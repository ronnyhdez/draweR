{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Drawer: Where I keep my R notes (and other dev stuff) Hi! Be aware that this is not an organized place. It's just a place where I put all my R notes to look for after. If something works for you as a reference, great! Take it! Before this, all this notes where kept in my desk drawer What you can find here: Things with strings Wondering how to ask yes and no questions in R? How this site was built? This site is hosted in GitHub. I just created the repo, went to configuration and enabled github pages. Then, with a bit of help of mkdocs and the material theme the site came to life. And now all my Rmarkdown notes fits in this site! Also, I was kind of \"obstinado\" having to repeat a couple of steps for each note that I wanted to deploy, so I created some R functions (around 3) to deal with this workflow and put everything together in a small R package that I called docmaker (Available just on GitHub) If you are new to this kind of documentation, I recommend you to check at least the package documentation, so you can find how to set-up everything to create your own site and give some freedom to your documentation. Who am I? I'm a desk biologist who likes to play around with my computer.","title":"Drawer: Where I keep my R notes (and other dev stuff)"},{"location":"#drawer-where-i-keep-my-r-notes-and-other-dev-stuff","text":"Hi! Be aware that this is not an organized place. It's just a place where I put all my R notes to look for after. If something works for you as a reference, great! Take it! Before this, all this notes where kept in my desk drawer","title":"Drawer: Where I keep my R notes (and other dev stuff)"},{"location":"#what-you-can-find-here","text":"Things with strings Wondering how to ask yes and no questions in R?","title":"What you can find here:"},{"location":"#how-this-site-was-built","text":"This site is hosted in GitHub. I just created the repo, went to configuration and enabled github pages. Then, with a bit of help of mkdocs and the material theme the site came to life. And now all my Rmarkdown notes fits in this site! Also, I was kind of \"obstinado\" having to repeat a couple of steps for each note that I wanted to deploy, so I created some R functions (around 3) to deal with this workflow and put everything together in a small R package that I called docmaker (Available just on GitHub) If you are new to this kind of documentation, I recommend you to check at least the package documentation, so you can find how to set-up everything to create your own site and give some freedom to your documentation.","title":"How this site was built?"},{"location":"#who-am-i","text":"I'm a desk biologist who likes to play around with my computer.","title":"Who am I?"},{"location":"code_functions_challenges/","text":"Quick notes about short R code and functions things that usually I don\u2019t do and I tend to forget. Change specific values in all columns for NA\u2019s A data frame with -9999 values in many columns that need to be replace with NA \u2019s values: # libraries library(dplyr) # Test data frame test <- tribble(~a, ~b, ~c, \"a\", 2, -9999, \"b\", 3, 5, \"c\", -9999, 6, \"d\", -9999, -9999) # Solution test %>% mutate_all(~na_if(., -9999)) ## # A tibble: 4 \u00d7 3 ## a b c ## <chr> <dbl> <dbl> ## 1 a 2 NA ## 2 b 3 5 ## 3 c NA 6 ## 4 d NA NA","title":"Code functions challenges"},{"location":"code_functions_challenges/#change-specific-values-in-all-columns-for-nas","text":"A data frame with -9999 values in many columns that need to be replace with NA \u2019s values: # libraries library(dplyr) # Test data frame test <- tribble(~a, ~b, ~c, \"a\", 2, -9999, \"b\", 3, 5, \"c\", -9999, 6, \"d\", -9999, -9999) # Solution test %>% mutate_all(~na_if(., -9999)) ## # A tibble: 4 \u00d7 3 ## a b c ## <chr> <dbl> <dbl> ## 1 a 2 NA ## 2 b 3 5 ## 3 c NA 6 ## 4 d NA NA","title":"Change specific values in all columns for NA\u2019s"},{"location":"google_drive_api/","text":"A mockup documented function to connect with the google drive API through R, check the files that exist in the drive folder, compare to what you have in your local folder and download just those that you don\u2019t have locally. Could be part of some workflow in an organization that uses google drive as their site to keep their data files (like a research lab) #' @import dplyr NULL #' @title Download data from google drive #' #' @author Ronny Alexander Hern\u00e1ndez Mora #' #' @description This function will check in a local folder, the existing files #' and compare which ones are missing from an specific folder in google drive. #' It will download the missing files #' #' @param drive_path The folder in google drive containing the files #' @param local_directory The local folder in which we want to download the #' files from google drive. #' #' @example #' \\dontrun{ #' get_drive_data(drive_path = \"data_workflows/data\", #' local_directory = \"datos\") #'} #' get_drive_data <- function(drive_path, local_directory) { options(gargle_oauth_email = \"my_email@gmail.com\") # Revisar archivos locales archivos_existentes <- fs::dir_ls(local_directory) %>% stringr::str_remove(paste0(local_directory, \"/\")) # Revisar archivos en drive camino <- drive_path # Check data available archivos_drive <- googledrive::drive_ls(path = camino) # archivos_drive <- archivos %>% # select(name) # Obtener nombres de archivos faltantes # Suponiendo que siempre tenemos mas archivos en drive archivos_faltantes <- archivos_drive %>% filter(!name %in% archivos_existentes) # Loop para traerse archivos que estan en drive pero no locales for (i in archivos_faltantes$name) { archivos_faltantes %>% select(id) %>% slice(1) %>% pull() %>% googledrive::drive_download( path = paste0(\"datos/\", i), overwrite = TRUE ) } } After the function is loaded in your Global environment, coupled with a map() and if all the data files have the same variables, we can read everything together in just one data frame: # Check drive and download data ------------------------------ get_drive_data(drive_path = \"data_workflows/data\", local_directory = \"datos\") # Read data -------------------------------------------------- # Create object with files of interest files <- dir_ls(path = \"datos\", glob = \"datos/principe_*\") principe <- files %>% map_dfr(read_csv, .id = \"file_id\")","title":"Google drive api"},{"location":"questions_in_r/","text":"Create questions with yesno package If we have functions that require the confirmation of the user, we can use the yesno package to create questions and the answer options: library(yesno) publicar <- function(){ respuesta <- yesno::yesno(\"\u00bfDesea publicar las notas?\", yes = \"Estoy seguro de publicarlas\", no = \"No, es un error\", no = \"NOOO, yo no quiero publicar nada\") if (respuesta == TRUE) { print(\"Los correos han sido enviados\") } else { print(\"No se envio nada\") } } #publicar()","title":"Create questions with `yesno` package"},{"location":"questions_in_r/#create-questions-with-yesno-package","text":"If we have functions that require the confirmation of the user, we can use the yesno package to create questions and the answer options: library(yesno) publicar <- function(){ respuesta <- yesno::yesno(\"\u00bfDesea publicar las notas?\", yes = \"Estoy seguro de publicarlas\", no = \"No, es un error\", no = \"NOOO, yo no quiero publicar nada\") if (respuesta == TRUE) { print(\"Los correos han sido enviados\") } else { print(\"No se envio nada\") } } #publicar()","title":"Create questions with yesno package"},{"location":"stringr_tips/","text":"How to extract numbers from a string Sometimes, I need to extract just the numbers that I can find in a string. To achieve this, I can use the following function: library(stringr) string_with_numbers <- c(\"01 uno\", \"02 dos\") str_extract(string_with_numbers , \"\\\\d+\") ## [1] \"01\" \"02\"","title":"How to extract numbers from a string"},{"location":"stringr_tips/#how-to-extract-numbers-from-a-string","text":"Sometimes, I need to extract just the numbers that I can find in a string. To achieve this, I can use the following function: library(stringr) string_with_numbers <- c(\"01 uno\", \"02 dos\") str_extract(string_with_numbers , \"\\\\d+\") ## [1] \"01\" \"02\"","title":"How to extract numbers from a string"}]}