{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! Hi! I'm ronny and this site is my digital drawer made public. This means that you will find here raw notes that I usually take when I working with data and I have the need to document the process I'm following. Be aware that this is not an organized place. It's just a place where I put all my R notes to look for after (in case my future self forgets what I did in the past). If you want to check a place with tutorials and edited notes you can go and check my blog . It's in spanglish (some posts in Spanish, others in English and maybe some of them with a mix) and I usually source part of the material from here. If something works for you as a reference, great! Take it! Before this, all this notes where kept in my desk drawer What you can find here On your left side you will see the main table of contents On your right side you will see the table of contents from the specific section you are in. How this site was built? This site is hosted in GitHub. I just created the repo, went to configuration and enabled github pages. Then, with a bit of help of mkdocs and the material theme the site came to life. And now all my Rmarkdown notes fits in this site! Also, I was kind of \"obstinado\" having to repeat a couple of steps for each note that I wanted to deploy, so I created some R functions (around 3) to deal with this workflow and put everything together in a small R package that I called docmaker (Available just on GitHub) If you are new to this kind of documentation, I recommend you to check at least the package documentation, so you can find how to set-up everything to create your own site and give some freedom to your documentation. Who I am? I'm a desk biologist who likes to play around with my computer, specially with R, Linux, Vim and a couple of other tools.","title":"Welcome!"},{"location":"#welcome","text":"Hi! I'm ronny and this site is my digital drawer made public. This means that you will find here raw notes that I usually take when I working with data and I have the need to document the process I'm following. Be aware that this is not an organized place. It's just a place where I put all my R notes to look for after (in case my future self forgets what I did in the past). If you want to check a place with tutorials and edited notes you can go and check my blog . It's in spanglish (some posts in Spanish, others in English and maybe some of them with a mix) and I usually source part of the material from here. If something works for you as a reference, great! Take it! Before this, all this notes where kept in my desk drawer","title":"Welcome!"},{"location":"#what-you-can-find-here","text":"On your left side you will see the main table of contents On your right side you will see the table of contents from the specific section you are in.","title":"What you can find here"},{"location":"#how-this-site-was-built","text":"This site is hosted in GitHub. I just created the repo, went to configuration and enabled github pages. Then, with a bit of help of mkdocs and the material theme the site came to life. And now all my Rmarkdown notes fits in this site! Also, I was kind of \"obstinado\" having to repeat a couple of steps for each note that I wanted to deploy, so I created some R functions (around 3) to deal with this workflow and put everything together in a small R package that I called docmaker (Available just on GitHub) If you are new to this kind of documentation, I recommend you to check at least the package documentation, so you can find how to set-up everything to create your own site and give some freedom to your documentation.","title":"How this site was built?"},{"location":"#who-i-am","text":"I'm a desk biologist who likes to play around with my computer, specially with R, Linux, Vim and a couple of other tools.","title":"Who I am?"},{"location":"bash_scripts/","text":"Bash things Set up a timer I created a file call timer.sh Inside it contains this: #!/bin/bash date1=`date +%s`; while true; do echo -ne \"$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\\r\"; Then, to run the script without thinking too much, I created an alias: alias timer=\"bash /home/ronny/timer.sh\" So, any time I open the terminal, I can have a timer just typing timer","title":"Bash things"},{"location":"bash_scripts/#bash-things","text":"","title":"Bash things"},{"location":"bash_scripts/#set-up-a-timer","text":"I created a file call timer.sh Inside it contains this: #!/bin/bash date1=`date +%s`; while true; do echo -ne \"$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\\r\"; Then, to run the script without thinking too much, I created an alias: alias timer=\"bash /home/ronny/timer.sh\" So, any time I open the terminal, I can have a timer just typing timer","title":"Set up a timer"},{"location":"code_functions_challenges/","text":"Quick notes about short R code and functions things that usually I don\u2019t do and I tend to forget. Change specific values in all columns for NA\u2019s A data frame with -9999 values in many columns that need to be replace with NA \u2019s values: # libraries library(dplyr) ## ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ## ## filter, lag ## The following objects are masked from 'package:base': ## ## intersect, setdiff, setequal, union # Test data frame test <- tribble(~a, ~b, ~c, \"a\", 2, -9999, \"b\", 3, 5, \"c\", -9999, 6, \"d\", -9999, -9999) # Solution test %>% mutate_all(~na_if(., -9999)) ## # A tibble: 4 \u00d7 3 ## a b c ## <chr> <dbl> <dbl> ## 1 a 2 NA ## 2 b 3 5 ## 3 c NA 6 ## 4 d NA NA","title":"Code functions challenges"},{"location":"code_functions_challenges/#change-specific-values-in-all-columns-for-nas","text":"A data frame with -9999 values in many columns that need to be replace with NA \u2019s values: # libraries library(dplyr) ## ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ## ## filter, lag ## The following objects are masked from 'package:base': ## ## intersect, setdiff, setequal, union # Test data frame test <- tribble(~a, ~b, ~c, \"a\", 2, -9999, \"b\", 3, 5, \"c\", -9999, 6, \"d\", -9999, -9999) # Solution test %>% mutate_all(~na_if(., -9999)) ## # A tibble: 4 \u00d7 3 ## a b c ## <chr> <dbl> <dbl> ## 1 a 2 NA ## 2 b 3 5 ## 3 c NA 6 ## 4 d NA NA","title":"Change specific values in all columns for NA\u2019s"},{"location":"google_drive_api/","text":"A mockup documented function to connect with the google drive API through R, check the files that exist in the drive folder, compare to what you have in your local folder and download just those that you don\u2019t have locally. Could be part of some workflow in an organization that uses google drive as their site to keep their data files (like a research lab) #' @import dplyr NULL #' @title Download data from google drive #' #' @author Ronny Alexander Hern\u00e1ndez Mora #' #' @description This function will check in a local folder, the existing files #' and compare which ones are missing from an specific folder in google drive. #' It will download the missing files #' #' @param drive_path The folder in google drive containing the files #' @param local_directory The local folder in which we want to download the #' files from google drive. #' #' @example #' \\dontrun{ #' get_drive_data(drive_path = \"data_workflows/data\", #' local_directory = \"datos\") #'} #' get_drive_data <- function(drive_path, local_directory) { options(gargle_oauth_email = \"my_email@gmail.com\") # Revisar archivos locales archivos_existentes <- fs::dir_ls(local_directory) %>% stringr::str_remove(paste0(local_directory, \"/\")) # Revisar archivos en drive camino <- drive_path # Check data available archivos_drive <- googledrive::drive_ls(path = camino) # archivos_drive <- archivos %>% # select(name) # Obtener nombres de archivos faltantes # Suponiendo que siempre tenemos mas archivos en drive archivos_faltantes <- archivos_drive %>% filter(!name %in% archivos_existentes) # Loop para traerse archivos que estan en drive pero no locales for (i in archivos_faltantes$name) { archivos_faltantes %>% select(id) %>% slice(1) %>% pull() %>% googledrive::drive_download( path = paste0(\"datos/\", i), overwrite = TRUE ) } } After the function is loaded in your Global environment, coupled with a map() and if all the data files have the same variables, we can read everything together in just one data frame: # Check drive and download data ------------------------------ get_drive_data(drive_path = \"data_workflows/data\", local_directory = \"datos\") # Read data -------------------------------------------------- # Create object with files of interest files <- dir_ls(path = \"datos\", glob = \"datos/principe_*\") principe <- files %>% map_dfr(read_csv, .id = \"file_id\")","title":"Google drive api"},{"location":"questions_in_r/","text":"Create questions with yesno package If we have functions that require the confirmation of the user, we can use the yesno package to create questions and the answer options: library(yesno) publicar <- function(){ respuesta <- yesno::yesno(\"\u00bfDesea publicar las notas?\", yes = \"Estoy seguro de publicarlas\", no = \"No, es un error\", no = \"NOOO, yo no quiero publicar nada\") if (respuesta == TRUE) { print(\"Los correos han sido enviados\") } else { print(\"No se envio nada\") } } #publicar()","title":"Questions in r"},{"location":"questions_in_r/#create-questions-with-yesno-package","text":"If we have functions that require the confirmation of the user, we can use the yesno package to create questions and the answer options: library(yesno) publicar <- function(){ respuesta <- yesno::yesno(\"\u00bfDesea publicar las notas?\", yes = \"Estoy seguro de publicarlas\", no = \"No, es un error\", no = \"NOOO, yo no quiero publicar nada\") if (respuesta == TRUE) { print(\"Los correos han sido enviados\") } else { print(\"No se envio nada\") } } #publicar()","title":"Create questions with yesno package"},{"location":"r_spatial_tutorial/","text":"All the code and examples here were created using the information in rspatial.org Downloading example data if (!file.exists('data/rs/samples.rds')) { download.file('https://biogeo.ucdavis.edu/data/rspatial/rsdata.zip', dest = 'data/rsdata.zip') unzip('data/rsdata.zip', exdir = 'data') }","title":"R spatial tutorial"},{"location":"r_spatial_tutorial/#downloading-example-data","text":"if (!file.exists('data/rs/samples.rds')) { download.file('https://biogeo.ucdavis.edu/data/rspatial/rsdata.zip', dest = 'data/rsdata.zip') unzip('data/rsdata.zip', exdir = 'data') }","title":"Downloading example data"},{"location":"stringr_tips/","text":"How many hours have I spent looking how to solve a regex? A lot! So here I have some quick notes on things that I have solved before and forget about it pretty often. How to extract numbers from a string Sometimes, I need to extract just the numbers that I can find in a string. To achieve this, I can use the following function: library(stringr) string_with_numbers <- c(\"01 uno\", \"02 dos\") str_extract(string_with_numbers , \"\\\\d+\") ## [1] \"01\" \"02\" Extract string between brackets library(stringr) library(tibble) library(dplyr) library(tidyr) ## The data frames with the column that I need check <- tribble( ~geo, \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.94739867829001,44.3105986723403]}\" , \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.94714795170373,44.310596361431216]}\", \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.9468972251475,44.31059404997191]}\" , \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.9466464986213,44.31059173796237]}\" , \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.94639577212517,44.3105894254026]}\" , \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.9461450456591,44.310587112292595]}\" ) ## Solution 1 (Didn't work) check %>% mutate(test = str_extract(geo, \"\\\\[|\\\\]\") ) %>% select(test) ## # A tibble: 6 \u00d7 1 ## test ## <chr> ## 1 [ ## 2 [ ## 3 [ ## 4 [ ## 5 [ ## 6 [ # Solution 2 (This one works!) check %>% mutate(test = str_extract(geo, \"\\\\[(.*?)\\\\]\") ) %>% select(test) %>% separate(col = \"test\", into = c(\"lat\", \"long\"), sep = \",\") %>% mutate(lat = str_extract(lat, \"-?[0-9.]+\"), long = str_extract(long, \"-?[0-9.]+\")) ## # A tibble: 6 \u00d7 2 ## lat long ## <chr> <chr> ## 1 -79.94739867829001 44.3105986723403 ## 2 -79.94714795170373 44.310596361431216 ## 3 -79.9468972251475 44.31059404997191 ## 4 -79.9466464986213 44.31059173796237 ## 5 -79.94639577212517 44.3105894254026 ## 6 -79.9461450456591 44.310587112292595","title":"Stringr tips"},{"location":"stringr_tips/#how-to-extract-numbers-from-a-string","text":"Sometimes, I need to extract just the numbers that I can find in a string. To achieve this, I can use the following function: library(stringr) string_with_numbers <- c(\"01 uno\", \"02 dos\") str_extract(string_with_numbers , \"\\\\d+\") ## [1] \"01\" \"02\"","title":"How to extract numbers from a string"},{"location":"stringr_tips/#extract-string-between-brackets","text":"library(stringr) library(tibble) library(dplyr) library(tidyr) ## The data frames with the column that I need check <- tribble( ~geo, \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.94739867829001,44.3105986723403]}\" , \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.94714795170373,44.310596361431216]}\", \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.9468972251475,44.31059404997191]}\" , \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.9466464986213,44.31059173796237]}\" , \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.94639577212517,44.3105894254026]}\" , \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.9461450456591,44.310587112292595]}\" ) ## Solution 1 (Didn't work) check %>% mutate(test = str_extract(geo, \"\\\\[|\\\\]\") ) %>% select(test) ## # A tibble: 6 \u00d7 1 ## test ## <chr> ## 1 [ ## 2 [ ## 3 [ ## 4 [ ## 5 [ ## 6 [ # Solution 2 (This one works!) check %>% mutate(test = str_extract(geo, \"\\\\[(.*?)\\\\]\") ) %>% select(test) %>% separate(col = \"test\", into = c(\"lat\", \"long\"), sep = \",\") %>% mutate(lat = str_extract(lat, \"-?[0-9.]+\"), long = str_extract(long, \"-?[0-9.]+\")) ## # A tibble: 6 \u00d7 2 ## lat long ## <chr> <chr> ## 1 -79.94739867829001 44.3105986723403 ## 2 -79.94714795170373 44.310596361431216 ## 3 -79.9468972251475 44.31059404997191 ## 4 -79.9466464986213 44.31059173796237 ## 5 -79.94639577212517 44.3105894254026 ## 6 -79.9461450456591 44.310587112292595","title":"Extract string between brackets"},{"location":"vim_notes/","text":"How to set up vim There are two config files: one for vim, otherone for nvim vim: ~/.vimrc nvim: ~/.config/nvim/init.vim I cannot find at this point a config file for vim O.o So, I will just create a .vimrc under my home: Now, given that I have installed in my computer vim and nvim, the way that the configuration files interact, seems that nvim takes prevalence. So, all the changes I made in the ~/.vimrc are not going to be stablished unless I source the vimrc in the init.vim As an example, this is the way my init.vim looks like: \" ============================= \" Source vimrc \" ============================ source ~/.vimrc \" ============================= \" Plugins \" ============================= call plug#begin() Plug 'JuliaEditorSupport/julia-vim' Plug 'kdheepak/JuliaFormatter.vim' Plug 'jpalardy/vim-slime' Plug 'neoclide/coc.nvim', {'branch': 'release'} Plug 'morhetz/gruvbox' call plug#end() \" ============================= \" VIM Slime \" ============================= let g:slime_target = \"neovim\" Creating and modifying the vimrc vim ~/.vimrc Settings for vim First I'm going to edit the vimrc file. One trick to try the configurations that I want, is that if I'm working on vim I can go to normal mode and try for example :set relative number and that will include the modification for that vim session. Customizing vim (plugins) Plugins are for this. Different from the settings that are things that comes already with vim, the plugins are made for this. To use plugins, we need a plugin manager. One of the most used ones is the vim-plug In order to use plugins (after installing the vim-plug) our .vimrc file should contain a section that starts and finish with this: call plug#begin('~/.vim/plugged') call plug#end() Now, if we want to install a plugin, we should write in the middle of those two calls the plugin. Save and then run :PlugInstall And that's it. It will download and install the files needed. As an example, to change a color scheme we can do: call plug#begin('~/.vim/plugged') Plug 'gruvbox-community/gruvbox' call plug#end() After the installation, we can set: :colorscheme gruvbox If I want to know the pluggins installed, and given that we are using the vim-plug we can check the pluggins in use with: :PlugStatus Working with vim and git Is kind of bothering to exit vim in order to commit changes in the git repository, so a way to do it is to use the bang :! to execute shell commands. :!git status :!git commit -m \"Ref #2 my changes done\" :!git push Here we can use the % to indicate current file: :!git add % :!git checkout % To be honest, its easier to open a new window with tmux and execute all terminal commands from there than from the vim session. It's less tipying.","title":"Vim notes"},{"location":"vim_notes/#how-to-set-up-vim","text":"There are two config files: one for vim, otherone for nvim vim: ~/.vimrc nvim: ~/.config/nvim/init.vim I cannot find at this point a config file for vim O.o So, I will just create a .vimrc under my home: Now, given that I have installed in my computer vim and nvim, the way that the configuration files interact, seems that nvim takes prevalence. So, all the changes I made in the ~/.vimrc are not going to be stablished unless I source the vimrc in the init.vim As an example, this is the way my init.vim looks like: \" ============================= \" Source vimrc \" ============================ source ~/.vimrc \" ============================= \" Plugins \" ============================= call plug#begin() Plug 'JuliaEditorSupport/julia-vim' Plug 'kdheepak/JuliaFormatter.vim' Plug 'jpalardy/vim-slime' Plug 'neoclide/coc.nvim', {'branch': 'release'} Plug 'morhetz/gruvbox' call plug#end() \" ============================= \" VIM Slime \" ============================= let g:slime_target = \"neovim\"","title":"How to set up vim"},{"location":"vim_notes/#creating-and-modifying-the-vimrc","text":"vim ~/.vimrc","title":"Creating and modifying the vimrc"},{"location":"vim_notes/#settings-for-vim","text":"First I'm going to edit the vimrc file. One trick to try the configurations that I want, is that if I'm working on vim I can go to normal mode and try for example :set relative number and that will include the modification for that vim session.","title":"Settings for vim"},{"location":"vim_notes/#customizing-vim-plugins","text":"Plugins are for this. Different from the settings that are things that comes already with vim, the plugins are made for this. To use plugins, we need a plugin manager. One of the most used ones is the vim-plug In order to use plugins (after installing the vim-plug) our .vimrc file should contain a section that starts and finish with this: call plug#begin('~/.vim/plugged') call plug#end() Now, if we want to install a plugin, we should write in the middle of those two calls the plugin. Save and then run :PlugInstall And that's it. It will download and install the files needed. As an example, to change a color scheme we can do: call plug#begin('~/.vim/plugged') Plug 'gruvbox-community/gruvbox' call plug#end() After the installation, we can set: :colorscheme gruvbox If I want to know the pluggins installed, and given that we are using the vim-plug we can check the pluggins in use with: :PlugStatus","title":"Customizing vim (plugins)"},{"location":"vim_notes/#working-with-vim-and-git","text":"Is kind of bothering to exit vim in order to commit changes in the git repository, so a way to do it is to use the bang :! to execute shell commands. :!git status :!git commit -m \"Ref #2 my changes done\" :!git push Here we can use the % to indicate current file: :!git add % :!git checkout % To be honest, its easier to open a new window with tmux and execute all terminal commands from there than from the vim session. It's less tipying.","title":"Working with vim and git"}]}