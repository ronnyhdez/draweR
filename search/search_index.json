{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>Hi! I'm ronny and this site is my digital drawer notes This means that you will find here raw notes about my dev journey. I take  this notes usually when learning new things, solving coding problems or when I'm doing some data analysis. Most of the topics will be about R, python, JavaScript, Linux, nvim, tmux among other tools that I use in my day to day or that I want to learn.</p> <p>Although I try to keep everything organized, sometimes I'm in a hurry, and as they say: it's better some documentation than nothing!</p>"},{"location":"#notes-organization","title":"Notes organization","text":"<p>This site have on the left side bar the main table of contents. When you choose one of those, you will see in the right side bar a second table of contents specifically for the main topic selected.</p> <p>I'm always trying to keep the topics and the content well organized, but this is a WIP (Work In Progress), so it will be changing through time.</p>"},{"location":"#how-can-i-use-the-notes","title":"How can I use the notes?","text":"<p>If something works for you as a reference or as a guide, great! Take it and use it! Before this, all this notes where kept in my real physical notebook on my desk drawer (Hence the name)</p> <p>Given that the notes here are a WIP and can be changing constantly, I created a \"more curated site\" that is my blog. Some of the posts use content first created here, but usually they have a more extended explanation.</p>"},{"location":"#how-can-i-create-my-own-drawer","title":"How can I create my own \"drawer\"?","text":"<p>I have a blogpost about it where you can learn and follow all the steps to build your own drawer. Also, I have a webinar with DataLatam (in spanish) on which I show all the steps with an example.</p> <p>In summary, I take my notes on <code>.Rmd</code>, <code>.qmd</code> or <code>md</code> files and with the help of my R package docmaker, I run the necessary steps to build the website with tools such as mkdocs and GitHub Pages.</p>"},{"location":"#who-i-am","title":"Who I am?","text":"<p>I consider myself a desk biologist who likes to play  around with my computer, specially with R, Linux, Vim and a couple of other tools.</p>"},{"location":"bash_scripts/","title":"Bash Terminal topics","text":"<p>Probably a bit messy given that I use this space to export notes when solving things.</p>"},{"location":"bash_scripts/#set-up-a-timer","title":"Set up a timer","text":"<p>I created a file call timer.sh</p> <p>Inside it contains this:</p> <pre><code>#!/bin/bash\n\ndate1=`date +%s`; while true; do \n   echo -ne \"$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\\r\";\n</code></pre> <p>Then, to run the script without thinking too much, I created an alias:</p> <pre><code>alias timer=\"bash /home/ronny/timer.sh\" \n</code></pre> <p>So, any time I open the terminal, I can have a timer just typing <code>timer</code></p>"},{"location":"bash_scripts/#set-up-python-conda-environment","title":"Set up python conda environment","text":"<ul> <li>Check if there are already envs:</li> </ul> <pre><code>conda info --envs\n\n# conda environments:\n#\nbase                  *  /home/ronny/anaconda3\ngee                      /home/ronny/anaconda3/envs/gee\ngpp                      /home/ronny/anaconda3/envs/gpp\nsatellite                /home/ronny/anaconda3/envs/satellite\n</code></pre> <ul> <li>To activate/deactivate:</li> </ul> <pre><code>conda activate\nconda deactivate\n</code></pre> <ul> <li>There is a difference between:</li> </ul> <pre><code>apt install spyder\nconda install spyder\n</code></pre> <ul> <li>To create a new env:</li> </ul> <pre><code>conda create --name gee python = 3.5\n</code></pre>"},{"location":"code_functions_challenges/","title":"Code functions challenges","text":"<p>Quick notes about short R code and functions things that usually I don\u2019t do and I tend to forget.</p>"},{"location":"code_functions_challenges/#change-specific-values-in-all-columns-for-nas","title":"Change specific values in all columns for NA\u2019s","text":"<p>A data frame with <code>-9999</code> values in many columns that need to be replace with <code>NA</code>\u2019s values:</p> <pre><code># libraries\nlibrary(dplyr)\n\n## \n## Attaching package: 'dplyr'\n\n## The following objects are masked from 'package:terra':\n## \n##     intersect, union\n\n## The following objects are masked from 'package:stats':\n## \n##     filter, lag\n\n## The following objects are masked from 'package:base':\n## \n##     intersect, setdiff, setequal, union\n\n# Test data frame\ntest &lt;- tribble(~a, ~b, ~c,\n                \"a\", 2, -9999,\n                \"b\", 3, 5,\n                \"c\", -9999, 6,\n                \"d\", -9999, -9999)\n\n# Solution\ntest %&gt;% \n  mutate_all(~na_if(., -9999))\n\n## # A tibble: 4 \u00d7 3\n##   a         b     c\n##   &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n## 1 a         2    NA\n## 2 b         3     5\n## 3 c        NA     6\n## 4 d        NA    NA\n</code></pre>"},{"location":"data_table/","title":"Data table","text":""},{"location":"data_table/#translating-a-dplyr-pipeline-to-data-table","title":"Translating a dplyr pipeline to data table","text":"<p>The problem was that a project had local csv files with many rows. When cleaning the data using dplyr this would consume a lot of the memory and take a lot of time to produce a result.</p> <p>So, an option was to implement the package <code>data.table</code> to be able to handle all this data in a local computer.</p> <p>This was the original data pipeline:</p> <pre><code>pixels_clean &lt;- pixels %&gt;% \n  separate(file_id, into = c(\"folder\", \"file_id\"), sep = \"/\") %&gt;% \n  mutate(file_id = str_remove(file_id, \".csv\")) %&gt;% \n  mutate(location = str_extract(geo, \"\\\\[(.*?)\\\\]\") ) %&gt;% \n  separate(col = \"location\", into = c(\"lat\", \"long\"), sep = \",\") %&gt;% \n  mutate(lat = str_extract(lat, \"-?[0-9.]+\"),\n         long = str_extract(long, \"-?[0-9.]+\")) %&gt;% \n  select(-folder, -geo) %&gt;% \n  separate(file_id, into = c(\"first\", \"second\", \"tnk\"), remove = FALSE) %&gt;% \n  select(-second, -tnk) %&gt;% \n  separate(first, into = c(\"date\", \"time\"), sep = \"T\") %&gt;% \n  mutate(date = ymd(date))\n</code></pre> <p>The translation to data table:</p> <pre><code>setDT(pixels_sr)\npixels_sr[, c(\"folder_1\", \"folder_2\", \"file_id\") := tstrsplit(file_id, \"/\", fixed = TRUE)]\npixels_sr[ , \":=\"(file_id = str_remove(file_id, \".csv\"))]\npixels_sr[ , \":=\"(location = str_extract(geo, \"\\\\[(.*?)\\\\]\"))]\npixels_sr[,  c(\"lat\", \"long\") := tstrsplit(location, \",\", fixed = TRUE)]\npixels_sr[ , \":=\"(lat = str_extract(lat, \"-?[0-9.]+\"),\n                  long = str_extract(long, \"-?[0-9.]+\"))]\npixels_sr[, \":=\"(date = ymd(file_id))]\npixels_sr[, c(\"file_id\", \"system_index\", \n              \"folder_1\", \"folder_2\",\n              \"geo\", \"location\") := NULL]\n</code></pre>"},{"location":"data_table/#other-tips","title":"Other tips:","text":"<p>If we have a column with more than ~40 groups, we should create a key:</p> <pre><code>setkey(pft, columna_con_muchos_grupos)\n</code></pre> <p>The sintaxis to summarise per groups will be:</p> <pre><code>check_mean &lt;- pft[ , .(mean_evi = mean(evi, na.rm = TRUE)), \n                   by = fecha]\n</code></pre> <p>Sintaxis for creating a new column with some column formulas:</p> <pre><code>pft[ , \":=\"(evi = (2.5 *(b8 - b4)) /\n              (b8 + (2.4 * b4) + 1000))]\n</code></pre>"},{"location":"docker/","title":"Docker","text":"<p>Notes about working with Docker</p>"},{"location":"docker/#steps-to-run-container-with-mounted-volumes","title":"Steps to run container with mounted volumes","text":"<ul> <li>I have a model that takes as an input an image</li> <li>A model make predictions over the image</li> <li>The output is an xml file</li> <li>I need the container to read the image from an specific directory in the host</li> <li>I need the container to write the results in an specific directory in the hots</li> </ul> <p>The Dockerfile:</p> <pre><code>FROM ubuntu:latest\n\n# Update package list and install GDAL and Python dependencies\nRUN apt-get update &amp;&amp; \\\n    apt-get install -y python3 python3-pip gdal-bin libgdal-dev ffmpeg libsm6 libxext6\n\n# Set environment variables for GDAL\nENV LD_LIBRARY_PATH=/usr/lib\nENV GDAL_DATA=/usr/share/gdal/\n\nEXPOSE 8080\n\n# Keeps Python from generating .pyc files in the container\nENV PYTHONDONTWRITEBYTECODE=1\n\n# Turns off buffering for easier container logging\nENV PYTHONUNBUFFERED=1\n\nWORKDIR /app\n\n# Install pip requirements\nCOPY ./requirements.txt /app/requirements.txt\nRUN pip install --no-cache-dir --upgrade -r /app/requirements.txt\n\nCOPY . /app\n\n# Define the input and output folder as volumes\nVOLUME /app/input_files\nVOLUME /app/predictions\n\n# Creates a non-root user with an explicit UID and adds permission to access the /app folder\n# For more info, please refer to https://aka.ms/vscode-docker-python-configure-containers\nRUN adduser -u 5678 --disabled-password --gecos \"\" appuser &amp;&amp; chown -R appuser /app\nUSER appuser\n\nCMD [\"python3\", \"predict_process.py\", \"--input_folder=/app/input_files\", \"--output_folder=/app/predictions\"]\n</code></pre> <p>After I build the image with the name predict_io, I can run the container indicating the paths in my host. Also, this container needs to run using the host GPU:</p> <pre><code>docker run --gpus all -v /home/ronny/Desktop/io_test/in/:/app/input_files -v /home/ronny/Desktop/io_test/out/:/app/predictions predict_io\n</code></pre> <p>When the container runs, it will retrieve the image from  /home/ronny/Desktop/io_test/in/, and it will write the results on /home/ronny/Desktop/io_test/out/</p> <p>If I receive the error: <code>Permission denied</code>, I will have to change the permissions in the host output folder. I did it with:</p> <pre><code>chmod a+w /home/ronny/Desktop/io_test/out/\n</code></pre>"},{"location":"fastpi_walkthrough/","title":"How to create an API with FastAPI and Docker","text":"<p>First, create repo that will contain all the files. Then open the repo from VScode. </p> <p>Create a new python file. In the python file, we can create a simple API like the following:</p> <pre><code>import uvicorn\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\ninventory = {\n    1: {\n        \"name\": \"Milk\",\n        \"price\": 3.99,\n        \"brand\": \"dospinos\"\n    },\n    2: {\n        \"name\": \"Milk\",\n        \"price\": 4.99,\n        \"brand\": \"coronado\"\n    }\n}\n\n\n@app.get(\"/get-item/{item_id}\")\ndef get_item(item_id: int):\n    return inventory[item_id]\n\n\n# if __name__ == '__main__':\n#     uvicorn.run(app, host='0.0.0.0', port=8000)\n</code></pre> <p>Once the file is created, before running the file, I have to create the environment:</p> <pre><code>pipenv install\n</code></pre> <p>Then, let's activate the environment</p> <pre><code>pipenv shell\n</code></pre> <p>Let's check the environment</p> <pre><code>pipenv --venv\n</code></pre> <p>Everything setup, with the last lines of code in the python file with the API we can run it with:</p> <pre><code>python3 name_of_file.py\n</code></pre> <p>That will serve the API in port 8000. We can go and check if it's running on localhost:8000</p> <p>If, those lines are not present, we can use the <code>uvicorn</code> package to serve the API:</p> <pre><code>uvicorn api_example_1:app\n</code></pre> <p>Note that there is no <code>.py</code> in the name of the file we want to run.</p>"},{"location":"fastpi_walkthrough/#docker","title":"Docker","text":"<p>Now that we have build the API and were able to serve it, we can dockerized.</p> <p>For this, with the Docker extension in VScode, we can press <code>Fn + F1</code> to create a file. If the extension throws an error about no connection to daemon socket, we need to aggregate Docker to sudo permissions:</p> <pre><code>sudo usermod -aG docker ${USER}\n</code></pre> <p>I had to restart computer to make this work. After that I was able to use the Docker extension. After opening the options, I look for add docker file and wrote the options asked.</p> <p>After this, a Docker file was created and also the <code>requirements.txt</code> file to be used during the image build process with venv (I think).</p> <p>The Docker file looks like the following:</p> <pre><code># For more information, please refer to https://aka.ms/vscode-docker-python\nFROM python:3.10-slim\n\nEXPOSE 8090\n\n# Keeps Python from generating .pyc files in the container\nENV PYTHONDONTWRITEBYTECODE=1\n\n# Turns off buffering for easier container logging\nENV PYTHONUNBUFFERED=1\n\n# Install pip requirements\nCOPY requirements.txt .\nRUN python -m pip install -r requirements.txt\n\nWORKDIR /app\nCOPY . /app\n\n# Creates a non-root user with an explicit UID and adds permission to access the /app folder\n# For more info, please refer to https://aka.ms/vscode-docker-python-configure-containers\nRUN adduser -u 5678 --disabled-password --gecos \"\" appuser &amp;&amp; chown -R appuser /app\nUSER appuser\n\n# During debugging, this entry point will be overridden. For more information, please refer to https://aka.ms/vscode-docker-python-debug\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8090\", \"-k\", \"uvicorn.workers.UvicornWorker\", \"api_example_1:app\"]\n</code></pre> <p>Now, the next step is to build the image and run it:</p> <pre><code>docker built -t test-api .\n</code></pre> <p>Then, run the container:</p> <pre><code>docker run -p 8000:8090 test-api\n</code></pre> <p>The instruction will bind the port 8000 on the host with the port 8090 in the container.</p> <p>Now we can check the container service in localhost:8000</p>"},{"location":"google_drive_api/","title":"Google drive api","text":"<p>A mockup documented function to connect with the google drive API through R, check the files that exist in the drive folder, compare to what you have in your local folder and download just those that you don\u2019t have locally.</p> <p>Could be part of some workflow in an organization that uses google drive as their site to keep their data files (like a research lab)</p> <pre><code>#' @import dplyr\nNULL\n\n#' @title Download data from google drive\n#' \n#' @author Ronny Alexander Hern\u00e1ndez Mora\n#' \n#' @description This function will check in a local folder, the existing files\n#' and compare which ones are missing from an specific folder in google drive.\n#' It will download the missing files\n#' \n#' @param drive_path The folder in google drive containing the files\n#' @param local_directory The local folder in which we want to download the \n#' files from google drive.\n#' \n#' @example \n#' \\dontrun{\n#' get_drive_data(drive_path = \"data_workflows/data\", \n#'                local_directory = \"datos\")\n#'}\n#'\nget_drive_data &lt;- function(drive_path, local_directory) {\n\n  options(gargle_oauth_email = \"my_email@gmail.com\")\n\n  # Revisar archivos locales\n  archivos_existentes &lt;- fs::dir_ls(local_directory) %&gt;% \n    stringr::str_remove(paste0(local_directory, \"/\"))\n\n  # Revisar archivos en drive\n  camino &lt;- drive_path\n\n  # Check data available\n  archivos_drive &lt;- googledrive::drive_ls(path = camino)\n\n  # archivos_drive &lt;- archivos %&gt;% \n  #   select(name)\n\n  # Obtener nombres de archivos faltantes\n  # Suponiendo que siempre tenemos mas archivos en drive\n  archivos_faltantes &lt;- archivos_drive %&gt;% \n    filter(!name %in% archivos_existentes)\n\n  # Loop para traerse archivos que estan en drive pero no locales\n  for (i in archivos_faltantes$name) {\n    archivos_faltantes %&gt;%\n      select(id) %&gt;%\n      slice(1) %&gt;%\n      pull() %&gt;%\n      googledrive::drive_download(\n        path = paste0(\"datos/\", i), overwrite = TRUE\n      )\n  }\n}\n</code></pre> <p>After the function is loaded in your Global environment, coupled with a <code>map()</code> and if all the data files have the same variables, we can read everything together in just one data frame:</p> <pre><code># Check drive and download data ------------------------------\nget_drive_data(drive_path = \"data_workflows/data\", \n               local_directory = \"datos\")\n# Read data --------------------------------------------------\n# Create object with files of interest\nfiles &lt;- dir_ls(path = \"datos\", glob = \"datos/principe_*\")\n\nprincipe &lt;- files %&gt;% \n  map_dfr(read_csv, .id = \"file_id\")\n</code></pre>"},{"location":"js/","title":"Notes on JS learning","text":"<p>From codecademy I obtained the following webpage that contains documentation on the methods for strings:</p> <p>js documentation</p> <p>methods are actions we can perform. We call or use this methods by:</p> <ul> <li>a period</li> <li>the name of the method</li> <li>opening and closing parethesis</li> </ul>"},{"location":"js/#built-in-objects","title":"Built-in objects","text":"<p>There are objects already define in JS that we can use. Each of this objects  have methods. More on this, here</p> <p>Example with <code>math</code> object:</p> <pre><code>Math.floor(Math.random() * 50)\n</code></pre> <p>This performs:</p> <ul> <li>random generates number random between 0 and 1</li> <li>Multiplyind by 50 makes it between 0 and 50</li> <li>floor round the number to the lowest whole number</li> </ul>"},{"location":"js/#notes-on-properties-and-methods","title":"Notes on properties and methods","text":"<ul> <li>Objects can have properties (stored information). Properties are denoted  with a <code>.</code> after the name of the object, for example: <code>Hello.length</code></li> <li>Objects including instances of data types can have methods which perform  actions.</li> </ul>"},{"location":"js/#notes-on-variables","title":"Notes on variables","text":"<ul> <li><code>var</code> is pre E56 versions</li> <li>Variables are stored in memory</li> <li><code>let</code> is preferred way to declare a variable when we want to be it      reassigned.</li> <li>Variables not initialized are assigned to <code>undefined</code></li> <li><code>+</code> can concatenate strings</li> <li>In E56 backtick and <code>${}</code> are use to interpolate values into a string</li> <li><code>typeof</code> return the data type of a value</li> </ul>"},{"location":"js/#truthy-and-falsy-assigment","title":"Truthy and Falsy assigment","text":"<p>An example of a conditional that evaluates if the variable is empty or not  and assigns a default string if not:</p> <pre><code>let username = '';\nlet defaultName;\n\nif (username) {\n  defaultName = username;\n} else {\n  defaultName = 'Stranger';\n}\n\nconsole.log(defaultName); // Prints: Stranger\n</code></pre> <p>Now, if we combine logical operators, we can do the same with less typing:</p> <pre><code>let username = '';\nlet defaultName = username || 'Stranger';\n\nconsole.log(defaultName); // Prints: Stranger\n</code></pre> <p>A <code>||</code> statement check the left condition first. If username had a string value, that one would be assigned to <code>defaultName</code>. Otherwise, if falsy, the <code>Stranger</code> value would be assigned. This concept is known as short-circuit-evaluation</p>"},{"location":"js/#ternary-operator","title":"Ternary operator","text":"<p>This is a way to simplify an <code>if else</code> statement:</p> <pre><code>let isNightTime = true;\n\nif (isNightTime) {\n  console.log('Turn on the lights!');\n} else {\n  console.log('Turn off the lights!');\n}\n</code></pre> <p>Now, the way to apply the ternary operator is:</p> <pre><code>isNightTime ? console.log('Turn on the lights!') : console.log('Turn off the lights!');\n</code></pre> <p>This is another example:</p> <pre><code>let favoritePhrase = 'Love That!';\n\nfavoritePhrase === 'Love That!' ? console.log('I love that!') :\n  console.log(\"I don't love that!\");\n</code></pre>"},{"location":"js/#switch-statement","title":"Switch statement","text":"<p>Instead of typing a complet <code>if else</code> conditional statement, we can use a switch statement to check a series of conditions. Let's take a look on how to transform a series of statement created with <code>if else</code> to a switch statement:</p> <pre><code>let groceryItem = 'papaya';\n\nif (groceryItem === 'tomato') {\n  console.log('Tomatoes are $0.49');\n} else if (groceryItem === 'papaya'){\n  console.log('Papayas are $1.29');\n} else {\n  console.log('Invalid item');\n}\n</code></pre> <pre><code>let groceryItem = 'papaya';\n\nswitch (groceryItem) {\n  case 'tomato':\n    console.log('Tomatoes are $0.49');\n    break;\n  case 'lime':\n    console.log('Limes are $1.49');\n    break;\n  case 'papaya':\n    console.log('Papayas are $1.29');\n    break;\n  default:\n    console.log('Invalid item');\n    break;\n}\n\n// Prints 'Papayas are $1.29'\n</code></pre> <p>Pay attention to the <code>break;</code> and the last piece which is the <code>default</code></p>"},{"location":"js/#magic-eight-ball-project","title":"Magic Eight Ball project","text":"<p>The idea of this project is to use control flow and somethings learned in the chapter:</p> <pre><code>let userName = ''\nuserName ? console.log(`Hello, ${userName}!`) : \n            console.log('Hello!')\n\nconst userQuestion = 'Should I accept offer?' \n\nconsole.log(`The ${userName} asked: ` + userQuestion)\n\nlet randomNumber = Math.floor(Math.random() * 8);\n\nlet eightBall = ''\n\nswitch (randomNumber) {\n  case 1:\n    eightBall = 'It is certain'\n    break;\n  case 2:\n    eightBall = 'It is decidedly so'\n    break;\n  case 3:\n    eightBall = 'Reply hazy try again'\n    break;\n  case 4:\n    eightBall = 'Cannot predict now'\n    break;\n  case 5:\n    eightBall = 'Do not count on it'\n    break;\n  case 6:\n    eightBall = 'My sources say no'\n    break;\n  case 7:\n    eightBall = 'Outlook not so good'\n    break;\n  case 8:\n    eightBall = 'Signs point to yes'\n    break;\n}\n\nconsole.log(eightBall)\n\n//This will print something like:\nHello!\nThe  asked: Should I accept offer?\nOutlook not so good\n</code></pre>"},{"location":"js/#functions","title":"Functions","text":"<p>There are like 3 ways to create a function in js:</p> <pre><code>const plantNeedsWater = function(day) {\n  if (day === 'Wednesday') {\n    return true;\n  } else {\n    return false;\n  }\n};\n</code></pre> <p>The same function but as an arrow function  - The idea is to avoid the need to write the word <code>function</code>:</p> <pre><code>const plantNeedsWater = (day) =&gt; {\n  if (day === 'Wednesday') {\n    return true;\n  } else {\n    return false;\n  }\n};\n</code></pre>"},{"location":"js/#consice-body-arrow-functions","title":"Consice body arrow functions","text":"<p>The most condensed form of a function are known as consice body</p> <ul> <li>Functions that take only one parameter, do not need parethensis. If the    arrow function have zero or more than one parameter, parenthesis are    required.</li> </ul> <pre><code>const functionName = () =&gt; {};\nconst functionName = parameter =&gt; {};\nconst functionName = (A, B) =&gt; {};\n</code></pre> <ul> <li>Functions with a one line body do not need the curly braces. Without the    curly braces, whatever the line evaluates, it will be returned inmediately.    The body of the function should be inmediately after the <code>=&gt;</code> and we can    remove the <code>return</code>. This is referred as implicit return</li> </ul> <pre><code>const sumNumber = number =&gt; number1 + number2;\n\nconst sumNumber = (number1, number2) =&gt; {\n    const sum = (number1 + number2);\n    return sum;\n}\n</code></pre> <p>This is another example on how to transform a function to a consice one:</p> <pre><code>const plantNeedsWater = (day) =&gt; {\n  return day === 'Wednesday' ? true : false;\n};\n\nconst plantNeedsWater = day =&gt; day === 'Wednesday' ? true : false;\n</code></pre>"},{"location":"js/#scope-pollution","title":"Scope pollution","text":"<p>Scoping rules are the same as in R. Nothing new. But there is one phenomena that I should be aware of: Scoping pollution</p> <p>This is an example:</p> <pre><code>let num = 50;\n\nconst logNum = () =&gt; {\n  num = 100; // Take note of this line of code\n  console.log(num);\n};\n\nlogNum(); // Prints 100\nconsole.log(num); // Prints 100\n</code></pre> <p>So, a good practice is to not declare global variables!!!</p>"},{"location":"js/#best-practice-for-scoping-pollution","title":"Best practice for scoping pollution","text":"<p>It's called block scope. Using this method will improve the code in several ways:</p> <ul> <li>Will make it more legible, since everything is organized in discrete     sections.</li> <li>Code will be more understandable, since it clarifies which parts are     associated with specific parts of the program.</li> <li>Code will be modular and easier to mantain.</li> <li>It saves memory, since variables will cease to exist after the block    finishes running.</li> </ul> <p>An example on how to use the block scope:</p> <pre><code>const logSkyColor = () =&gt; {\n  const dusk = true;\n  let color = 'blue'; \n  if (dusk) {\n    let color = 'pink';\n    console.log(color); // Prints \"pink\"\n  }\n  console.log(color); // Prints \"blue\"\n};\n\nconsole.log(color); // throws a ReferenceError\n</code></pre>"},{"location":"js/#setting-the-dev-enviroment","title":"Setting the dev enviroment:","text":""},{"location":"js/#installing-nodejs","title":"Installing nodejs","text":"<p>Downloaded from https://nodejs.org/en/</p> <p>Warning   - Installing from apt, will install an outdated version of nodejs.</p> <p>So, I downloaded the tar.gz file from the webpage, and then I run:</p> <pre><code>sudo tar -xf node-v18.13.0-linux-x64.tar.xz --directory=/usr/local --strip-components=1\n</code></pre> <p>After that, I checked the installed version:</p> <pre><code>node -v\n</code></pre>"},{"location":"js/#first-react-app","title":"First react app","text":"<p>Run the command <code>create-react-app</code></p> <pre><code>create-react-app react-test\n</code></pre> <p>There is one image in the <code>img</code> folder with the terminal output after running this command.</p> <p>This will install all the third party libraries needed to create the react app. Once everything is ready, I can run the template app with</p> <pre><code>cd react-test\nnpm start\n</code></pre> <p>Now that we have a template app, we can open VisualStudio to check the folder structure.</p> <p>To start playing around with our first app, we can proceed to delete all the template files inside the <code>src</code> folder. We are going to build our own files from scratch.</p>"},{"location":"js/#tips","title":"Tips","text":"<ul> <li>On user settings, I can set up the <code>formatting on save</code> to apply formatting    changes when saving the file.</li> <li>To change several words that are the same (for example <code>div</code>) I can    highlight one of the words and press <code>ctrl + d</code>. This will enable multi    line editing.</li> </ul>"},{"location":"js/#a-short-game-in-js","title":"A short game in js","text":"<p>The idea was to create the 'rock, paper, scissors' game using the concepts of creating a function and the ifelse.</p> <pre><code>console.log('hi');\n\nconst getUserChoice = (userInput) =&gt; {\n  userInput = userInput.toLowerCase();\n  if (userInput === 'rock') {\n    return (userInput);\n  } else if (userInput === 'paper') {\n    return(userInput);\n  } else if (userInput === 'scissors') {\n    return(userInput)\n  } else {\n    console.log('Error, option not available');\n  }\n}\n\nconst getComputerChoice = () =&gt; {\n  compNumber = Math.floor(Math.random() * 3 )\n  let compChoice = ''\n\n  switch(compNumber) {\n    case 0:\n      compChoice = 'rock';\n      break;\n    case 1:\n      compChoice = 'paper';\n      break;\n    case 2:\n      compChoice = 'scissors';\n      break;\n    }\n  return(compChoice)\n}\n\nconst determineWinner = (userChoice, computerChoice) =&gt; {\n  if (userChoice === computerChoice) {\n    return('It\\'s a tie!')\n  }\n\n  if (userChoice === 'rock') {\n    if (computerChoice === 'paper') {\n      return('Computer won')\n    } else {\n      return('Human won')\n    }\n  }\n\n   if (userChoice === 'paper') {\n    if (computerChoice === 'scissors') {\n      return('Computer won')\n    } else {\n      return('Human won')\n    }\n  }\n\n   if (userChoice === 'scissors') {\n    if (computerChoice === 'rock') {\n      return('Computer won')\n    } else {\n      return('Human won')\n    }\n  }\n}\n\nconst playGame = () =&gt; {\n  let userChoice = getUserChoice('paper')\n  console.log(userChoice)  \n  let computerChoice = getComputerChoice()\n  console.log(computerChoice)\n\n  console.log(determineWinner(userChoice, computerChoice))\n}\n\nplayGame()\n</code></pre>"},{"location":"linux/","title":"Installing RStudio in Ubuntu","text":"<p>Instalacion de R en ubuntu 20.10 desde binario de RStudio</p>"},{"location":"linux/#instalar-gdebi","title":"Instalar gdebi","text":"<pre><code>sudo apt update\nsudo apt install gdebi-core\n</code></pre>"},{"location":"linux/#especificar-version-de-r","title":"Especificar version de R","text":"<pre><code>export R_VERSION=4.1.1\n</code></pre>"},{"location":"linux/#descargar-binario-de-r","title":"Descargar binario de R","text":"<pre><code>curl -O https://cdn.rstudio.com/r/ubuntu-2004/pkgs/r-${R_VERSION}_1_amd64.deb\n</code></pre>"},{"location":"linux/#instalar-binario-de-r","title":"Instalar binario de R","text":"<pre><code>sudo gdebi r-${R_VERSION}_1_amd64.deb\n</code></pre>"},{"location":"linux/#validar-version-de-r","title":"Validar version de R","text":"<pre><code>/opt/R/${R_VERSION}/bin/R --version\n</code></pre>"},{"location":"linux/#crear-los-symlink","title":"Crear los symlink","text":"<pre><code>sudo ln -s /opt/R/${R_VERSION}/bin/R /usr/local/bin/R\nsudo ln -s /opt/R/${R_VERSION}/bin/Rscript /usr/local/bin/Rscript\n</code></pre>"},{"location":"linux/#instalacion-de-rstudio-en-ubuntu-2010","title":"Instalaci'on de RStudio en ubuntu 20.10","text":"<p>Descarga RStudio desktop desde el sitio https://www.rstudio.com/products/rstudio/download/#download</p> <p>Validar en que carpeta de la computadora quedo el archivo comprimido</p>"},{"location":"linux/#instalar-con-gdebi-rstudio","title":"instalar con gdebi rstudio","text":"<pre><code>sudo gdebi Downloads/rstudio-1.4.1717-amd64.deb \n</code></pre>"},{"location":"linux/#actualizar-paquetes","title":"Actualizar paquetes.","text":"<p>Al tener la nueva instalacion, los paquetes que tenia instalados,  ya no los tengo. En lugar de ir instalando cada uno por separado, lo que hago es que el directorio donde tenia las instalaciones de los paquetes, la copio en la nueva direccion.</p> <pre><code>/home/ronny/R/x86_64-pc-linux-gnu-library/4.1\n</code></pre> <p>Luego, abro RStudio, en el panel de paquetes selecciono la opcion <code>update</code>,  luego <code>Select all</code> y por ultimo <code>Install Updates</code>.  Asi se instalaran todos  los paquetes que tenia anteriormente.</p>"},{"location":"linux/#apache-configuration-steps-for-shiny-server","title":"Apache configuration steps for shiny server","text":"<ul> <li>Para saber si un archivo es un symlink: file archivo</li> </ul>"},{"location":"linux/#instalar-dependencias","title":"Instalar dependencias:","text":"<pre><code>sudo apt-get install apache2\nsudo apt-get install libapache2-mod-proxy-html\nsudo apt-get install libxml2-dev\n</code></pre>"},{"location":"linux/#habilitar-modulos","title":"Habilitar modulos","text":"<pre><code>sudo a2enmod proxy\nsudo a2enmod proxy_http\nsudo a2enmod proxy_wstunnel\nsudo a2enmod rewrite\n</code></pre>"},{"location":"linux/#configurar-archivo-etcapache2sites-available000-defaultconf","title":"Configurar archivo /etc/apache2/sites-available/000-default.conf","text":"<p>Dejar lo siguiente: (se puede borrar todo lo demas)</p> <pre><code>&lt;VirtualHost *:80&gt;\n\n  &lt;Proxy *&gt;\n    Allow from localhost\n  &lt;/Proxy&gt;\n\n RewriteEngine on\n RewriteCond %{HTTP:Upgrade} =websocket\n RewriteRule /(.*) ws://localhost:3838/$1 [P,L]\n RewriteCond %{HTTP:Upgrade} !=websocket\n RewriteRule /(.*) http://localhost:3838/$1 [P,L]\n ProxyPass / http://localhost:3838/\n ProxyPassReverse / http://localhost:3838/\n ProxyRequests Off\n\n&lt;/VirtualHost&gt;\n</code></pre>"},{"location":"linux/#reiniciar-apache","title":"Reiniciar apache","text":"<pre><code>sudo systemctl restart apache2\n</code></pre>"},{"location":"linux/#ir-a-revisar-la-direccion-ip-a-ver-si-ya-no-tenemos-que-usar-la-puerta","title":"Ir a revisar la direccion ip a ver si ya no tenemos que usar la puerta","text":""},{"location":"nvim_cheatsheet/","title":"Keybindings to work with nvim and R","text":"<p>Connect to R Console</p> <pre><code>\\rf\n</code></pre> <p>Quit R console</p> <pre><code>\\rq Quit R console\n</code></pre> <p>Run current line and move next line</p> <pre><code>\\d\n</code></pre> <p>Execute a block of selected code</p> <pre><code>\\ss \n</code></pre> <p>Execute entire script</p> <pre><code>\\aa\n</code></pre> <p>Opens Object Browser (Global environment)</p> <pre><code>\\ro\n</code></pre> <p>Jump left panel</p> <pre><code>ctrl + w + l\n</code></pre> <p>Jump right pane;</p> <pre><code>ctrl + w + h\n</code></pre> <p>Run block of code and move next line</p> <pre><code>\\pd\n</code></pre>"},{"location":"questions_in_r/","title":"Create questions with <code>yesno</code> package","text":"<p>If we have functions that require the confirmation of the user, we can use the <code>yesno</code> package to create questions and the answer options:</p> <pre><code>library(yesno)\npublicar &lt;- function(){\n  respuesta &lt;- yesno::yesno(\"\u00bfDesea publicar las notas?\",\n                            yes = \"Estoy seguro de publicarlas\",\n                            no = \"No, es un error\",\n                            no = \"NOOO, yo no quiero publicar nada\")\n\n  if (respuesta == TRUE) {\n    print(\"Los correos han sido enviados\")\n  } else {\n    print(\"No se envio nada\")\n  }\n}\n\n#publicar()\n</code></pre>"},{"location":"r_spatial_tutorial/","title":"R spatial notes","text":"<p>All notes related to experiments to deal and learn about using spatial data with R.</p>"},{"location":"r_spatial_tutorial/#exporting-a-cog-cloud-optimized-geotiff-file-from-gee","title":"Exporting a COG (Cloud Optimized Geotiff) file from GEE","text":"<p>The idea is to document steps to export from Google Earth Engine a COG file (or several) to Google Drive to be imported latter in R for analysis.</p> <p>As a first approach, I followed a tutorial from the Google documentation:.</p> <p>The code below is a copy/paste from the GEE IDE:</p> <pre><code>// Load a landsat image and select three bands.\nvar landsat = ee.Image('LANDSAT/LC08/C01/T1_TOA/LC08_123032_20140515')\n  .select(['B4', 'B3', 'B2']);\n\n// Create a geometry representing an export region.\nvar geometry = ee.Geometry.Rectangle([116.2621, 39.8412, 116.4849, 40.01236]);\n\n// Retrieve the projection information from a band of the original image.\n// Call getInfo() on the projection to request a client-side object containing\n// the crs and transform information needed for the client-side Export function.\nvar projection = landsat.select('B2').projection().getInfo();\n\n// Export a cloud-optimized GeoTIFF.\nExport.image.toDrive({\n  image: landsat,\n  description: 'imageToCOGeoTiffExample',\n  crs: projection.crs,\n  crsTransform: projection.transform,\n  region: geometry,\n  folder: \"GEE_testing\",\n  fileFormat: 'GeoTIFF',\n  formatOptions: {\n    cloudOptimized: true\n  }\n});\n</code></pre> <p>After the COG file was exported to my Google Drive, I downloaded to my data folder. Then, this file was imported to my R session with the help of the <code>terra</code> package:</p> <pre><code>library(terra)\n\ncheck &lt;- rast(\"data/imageToCOGeoTiffExample.tif\")\n</code></pre> <p>And, to validate it, I plotted the file using the <code>terra</code> function:</p> <pre><code>plot(check)\n\nplotRGB(check, axes = TRUE, stretch = \"lin\", main = \"Landsat True Color Composite\")\n</code></pre>"},{"location":"r_spatial_tutorial/#references","title":"References","text":"<ul> <li>https://rspatial.org/terra/pkg/1-introduction.html</li> <li>https://geocompr.robinlovelace.net/read-write.html#raster-data-read</li> <li>https://rspatial.org/raster/rs/2-exploration.html</li> <li>https://developers.google.com/earth-engine/guides/exporting</li> </ul>"},{"location":"r_spatial_tutorial/#updating-gdal-in-ubuntu","title":"Updating GDAL in Ubuntu","text":"<p>For using the <code>terra</code> package or other spatial packages in R, it\u2019s necessary to install in your system GDAL. There are several steps to follow to do this.</p> <p>In my case, I had already GDAL on my system but it was outdated.</p> <pre><code>$ gdalinfo --version\nGDAL 3.0.4, released 2020/01/28\n</code></pre> <p>So, I removed first the system packages:</p> <pre><code>sudo apt remove libgdal-dev\nsudo apt remove libproj-dev\nsudo apt remove gdal-bin\n</code></pre> <p>Then I proceed to add the PPA ubuntugis</p> <pre><code>sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable\n</code></pre> <p>Finally, I installed the necessary packages:</p> <pre><code>sudo apt-get install gdal-bin\nsudo apt-get install libgdal-dev libgeos-dev libproj-dev \nsudo apt update\nsudo apt upgrade\nsudo apt autoremove\n</code></pre> <p>And now, my GDAL version is:</p> <pre><code>$ gdalinfo --version\nGDAL 3.3.2, released 2021/09/01\n</code></pre>"},{"location":"r_spatial_tutorial/#terra-package-tutorial","title":"<code>terra</code> package tutorial","text":"<p>All the code and examples here were created using the information in rspatial.org</p>"},{"location":"r_spatial_tutorial/#downloading-example-data","title":"Downloading example data","text":"<pre><code>if (!fs::dir_exists(\"data\")) {\n  dir.create(\"data\", showWarnings = FALSE)\n}\n\nif (!file.exists(\"data/rs/samples.rds\")) {\n    download.file(\"https://biogeo.ucdavis.edu/data/rspatial/rs.zip\", dest = \"data/rs.zip\")\n    unzip(\"data/rs.zip\", exdir=\"data\")\n}\n</code></pre>"},{"location":"r_spatial_tutorial/#working-with-modis-data","title":"Working with MODIS data","text":"<p>The documentation states that we should work with the <code>luna</code> package, but it\u2019s not on CRAN, so I downloaded directly from the GitHub</p> <pre><code># remotes::install_github(\"rspatial/luna\")\nlibrary(terra)\nlibrary(luna)\n\n# Check products available through package API's\nprod &lt;- getProducts()\nhead(prod)\n\n# Check just the MODIS products\nmodis &lt;- getProducts(\"^MOD|^MYD|^MCD\")\nhead(modis)\n\n\n# To redirect to MODIS info webpage\n## Examples comes with MOD09A1\n## I'm interested in MOD09GA\nproductInfo(\"MOD09GA\")\n\n# Queremos descargar los datos\n## Necesitamos area de interes\n## Fecha de inicio y de fin\n\nnicoya &lt;- geodata::gadm(\"Costa Rica\", level = 1, path = \".\")\nnicoya\n\nguanacaste &lt;- nicoya[nicoya$NAME_1 == \"Guanacaste\", ]\n\n# Plot area\nplot(nicoya, col = \"light gray\")\nlines(guanacaste, col = \"red\", lwd = 2)\n\n# Check MODIS data available for the area of interest\nmf &lt;- luna::getModis(product = \"MOD09GA\", \n                     start_date = \"2015-01-01\", \n                     end_date = \"2015-01-07\", \n                     aoi = guanacaste,\n                     download = FALSE)\nmf\n\n# Let's download some data\nusername &lt;- Sys.getenv(\"EARTHDATA_USER\")\npasswd &lt;- Sys.getenv(\"EARTHDATA_PASSWD\")\n\nmf &lt;- luna::getModis(product = \"MOD09GA\", \n                     start_date = \"2015-01-01\", \n                     end_date = \"2015-01-07\", \n                     aoi = guanacaste,\n                     download = TRUE,\n                     path = here::here(\"data\"),\n                     username = username,\n                     password = passwd)\nmf\n\n# At this point, we should have the data in the path indicated\n\n# Explore the downloaded data:\nlibrary(fs)\nlibrary(terra)\nfile &lt;- file.path(here::here(), \"data/MOD09GA.A2015006.h09v07.006.2015295062629.hdf\")\nr &lt;- rast(file)\n\n\ndatadir &lt;- file.path(dirname(tempdir()), \"_modis\")\nmf &lt;- file.path(datadir, \"MOD09A1.A2009361.h21v08.006.2015198070255.hdf\")\nlibrary(terra)\nr &lt;- rast(mf[1])\nr\n</code></pre> <p>I have the problem that I cannot read the downloaded files</p> <pre><code># with same steps as tutorial\nproduct &lt;- \"MOD09A1\"\nstart &lt;- \"2010-01-01\"\nend &lt;- \"2010-01-07\"\n\n\nken &lt;- geodata::gadm(\"Kenya\", level=1, path=\".\")\nken\n\ni &lt;- ken$NAME_1 == \"Marsabit\"\naoi &lt;- ken[i,]\n\nplot(ken, col=\"light gray\")\nlines(aoi, col=\"red\", lwd=2)\n\nmf &lt;- luna::getModis(product, start, end, aoi=aoi, download = FALSE)\nmf\n\ndatadir &lt;- file.path(dirname(tempdir()), \"_modis\")\ndir.create(datadir, showWarnings=FALSE)\n\nmf &lt;- luna::getModis(product, start, end, aoi=aoi, download=TRUE,\n                     path=datadir, username = username,\n                     password = passwd)\nmf\n\n\ndatadir &lt;- file.path(dirname(tempdir()), \"_modis\")\nmf &lt;- file.path(datadir, \"MOD09A1.A2009361.h21v08.006.2015198070255.hdf\")\nlibrary(terra)\nr &lt;- terra::rast(mf[1])\nr\n</code></pre>"},{"location":"r_spatial_tutorial/#httpsrspatialorgterramodis4-qualityhtml","title":"https://rspatial.org/terra/modis/4-quality.html","text":""},{"location":"stringr_tips/","title":"Stringr tips","text":"<p>How many hours have I spent looking how to solve a regex?</p> <p>A lot!</p> <p>So here I have some quick notes on things that I have solved before and forget about it pretty often.</p>"},{"location":"stringr_tips/#how-to-extract-numbers-from-a-string","title":"How to extract numbers from a string","text":"<p>Sometimes, I need to extract just the numbers that I can find in a string. To achieve this, I can use the following function:</p> <pre><code>library(stringr)\n\nstring_with_numbers &lt;- c(\"01 uno\", \"02 dos\")\n\nstr_extract(string_with_numbers , \"\\\\d+\")\n\n## [1] \"01\" \"02\"\n</code></pre>"},{"location":"stringr_tips/#extract-string-between-brackets","title":"Extract string between brackets","text":"<pre><code>library(stringr)\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(tidyr)\n\n## \n## Attaching package: 'tidyr'\n\n## The following object is masked from 'package:terra':\n## \n##     extract\n\n## The data frames with the column that I need\ncheck &lt;- tribble(\n  ~geo,\n  \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.94739867829001,44.3105986723403]}\" , \n  \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.94714795170373,44.310596361431216]}\",\n  \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.9468972251475,44.31059404997191]}\" , \n  \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.9466464986213,44.31059173796237]}\" , \n  \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.94639577212517,44.3105894254026]}\" , \n  \"{\\\"geodesic\\\":false,\\\"type\\\":\\\"Point\\\",\\\"coordinates\\\":[-79.9461450456591,44.310587112292595]}\" \n)\n\n## Solution 1 (Didn't work)\ncheck %&gt;% \n  mutate(test = str_extract(geo, \"\\\\[|\\\\]\") ) %&gt;% \n  select(test)\n\n## # A tibble: 6 \u00d7 1\n##   test \n##   &lt;chr&gt;\n## 1 [    \n## 2 [    \n## 3 [    \n## 4 [    \n## 5 [    \n## 6 [\n\n# Solution 2 (This one works!)\ncheck %&gt;% \n  mutate(test = str_extract(geo, \"\\\\[(.*?)\\\\]\") ) %&gt;% \n  select(test) %&gt;% \n  separate(col = \"test\", into = c(\"lat\", \"long\"), sep = \",\") %&gt;% \n  mutate(lat = str_extract(lat, \"-?[0-9.]+\"),\n         long = str_extract(long, \"-?[0-9.]+\"))\n\n## # A tibble: 6 \u00d7 2\n##   lat                long              \n##   &lt;chr&gt;              &lt;chr&gt;             \n## 1 -79.94739867829001 44.3105986723403  \n## 2 -79.94714795170373 44.310596361431216\n## 3 -79.9468972251475  44.31059404997191 \n## 4 -79.9466464986213  44.31059173796237 \n## 5 -79.94639577212517 44.3105894254026  \n## 6 -79.9461450456591  44.310587112292595\n</code></pre>"},{"location":"vim_notes/","title":"Vim notes","text":""},{"location":"vim_notes/#how-to-set-up-vim","title":"How to set up vim","text":"<p>There are two config files: one for vim, otherone for nvim</p> <ul> <li>vim: ~/.vimrc</li> <li>nvim: ~/.config/nvim/init.vim</li> </ul> <p>I cannot find at this point a config file for vim O.o  So, I will just create a <code>.vimrc</code> under my home:</p> <p>Now, given that I have installed in my computer vim and nvim, the way that the configuration files interact, seems that nvim takes prevalence.</p> <p>So, all the changes I made in the ~/.vimrc are not going to be stablished unless I source the vimrc in the init.vim</p> <p>As an example, this is the way my init.vim looks like:</p> <pre><code>\" =============================\n\" Source vimrc\n\" ============================\nsource ~/.vimrc\n\n\" =============================\n\" Plugins\n\" =============================\ncall plug#begin()\n Plug 'JuliaEditorSupport/julia-vim'\n Plug 'kdheepak/JuliaFormatter.vim'\n Plug 'jpalardy/vim-slime'\n Plug 'neoclide/coc.nvim', {'branch': 'release'}\n Plug 'morhetz/gruvbox'\ncall plug#end()\n\n\" =============================\n\" VIM Slime\n\" =============================\nlet g:slime_target = \"neovim\"\n</code></pre>"},{"location":"vim_notes/#creating-and-modifying-the-vimrc","title":"Creating and modifying the vimrc","text":"<pre><code>vim ~/.vimrc\n</code></pre>"},{"location":"vim_notes/#settings-for-vim","title":"Settings for vim","text":"<p>First I'm going to edit the vimrc file. One trick to try the configurations  that I want, is that if I'm working on vim I can go to normal mode and try  for example <code>:set relative number</code> and that will include the modification for  that vim session.</p>"},{"location":"vim_notes/#customizing-vim-plugins","title":"Customizing vim (plugins)","text":"<p>Plugins are for this. Different from the settings that are things that comes  already with vim, the plugins are made for this.</p> <p>To use plugins, we need a plugin manager. One of the most used ones is the <code>vim-plug</code></p> <p>In order to use plugins (after installing the vim-plug) our .vimrc file should contain a section that starts and finish with this:</p> <pre><code>call plug#begin('~/.vim/plugged')\n\ncall plug#end()\n</code></pre> <p>Now, if we want to install a plugin, we should write in the middle of those  two calls the plugin. Save and then run</p> <pre><code>:PlugInstall\n</code></pre> <p>And that's it. It will download and install the files needed. As an example, to change a color scheme we can do:</p> <pre><code>call plug#begin('~/.vim/plugged')\nPlug 'gruvbox-community/gruvbox'\ncall plug#end()\n</code></pre> <p>After the installation, we can set:</p> <pre><code>:colorscheme gruvbox\n</code></pre> <p>If I want to know the pluggins installed, and given that we are using the vim-plug we can check the pluggins in use with:</p> <pre><code>:PlugStatus\n</code></pre>"},{"location":"vim_notes/#working-with-vim-and-git","title":"Working with vim and git","text":"<p>Is kind of bothering to exit vim in order to commit changes in the git  repository, so a way to do it is to use the bang <code>:!</code> to execute shell commands.</p> <pre><code>:!git status\n:!git commit -m \"Ref #2 my changes done\"\n:!git push\n</code></pre> <p>Here we can use the <code>%</code> to indicate current file:</p> <pre><code>:!git add %\n:!git checkout %\n</code></pre> <p>To be honest, its easier to open a new window with tmux and execute all terminal commands from there than from the vim session. It's less tipying.</p>"},{"location":"vim_notes/#workflow","title":"Workflow","text":"<p>When changing the <code>.vimrc</code> file</p>"},{"location":"vim_notes/#errors","title":"Errors","text":"<p>Section with some of the errors that I have faced and followed steps to solve them.</p>"},{"location":"vim_notes/#coc-nodejs-not-executable","title":".coc nodejs not executable","text":"<p>When opening a vim session, always this message will pop-up:</p> <p><code>\"node\" is not executable, checkout https://nodejs.org/en/download/</code></p> <p>To install nodejs and avoid this problem, I did:</p> <pre><code>curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n</code></pre>"},{"location":"vim_notes/#rf-not-starting-r-session","title":"rf not starting R session <p>Given that the rf is not working when opening a R file, one of the solutions is to indicate the R path in the <code>.vimrc</code> file, so I included it <pre><code>let R_path = '~/R/x86_64-pc-linux-gnu-library/4.2'\n</code></pre> <p>Nonetheless, it's still not working.</p>","text":""},{"location":"vim_notes/#new-start","title":"New start","text":"<p>So, given that my configuration wasn't working who knows why, I just commented all the <code>.vimrc</code> file and start over again checking what worked and what no.</p> <p>After commenting my <code>.vimrc</code>, I reloaded it. I opened a <code>vim_test.R</code> file, hit <code>\\rf</code> and it worked!</p> <p>Now that it worked, I went through the <code>.vimrc</code> and start uncommenting some of the things that I thought would not affect again nvim-r. The final file looks like this one:</p> <pre><code>\" No compatibility with vi to avoid problems\n\"set nocompatible\n\n\n\" Source vimrc file if specific project have one\n\"set exrc\n\n\" Cursor as a block\nset guicursor=\n\n\" Use relative numbers in files\nset relativenumber\n\n\" Line where I'm positioned is the real line number\nset nu\n\n\" Avoid leaving highligth after a search is done\n\"set nohlsearch\n\n\" No saving or keeping buffer in the background\nset hidden\n\n\" Indentetation configuration\nset tabstop=4 softtabstop=4\nset shiftwidth=4\nset expandtab\nset smartindent\n\n\" Start scrolling until 8 spaces away\nset scrolloff=8\n\n\" Create extra column\nset signcolumn=yes\n\n\" Mark 80 characters line\nset colorcolumn=80\n\n\" Enable type file detection\n\"filetype on\n\n\" Enable plugins and load plugins for the detected filetype\n\"filetype plugin on\n\n\" Load an indent file for the detected file type\n\"filetype indent on\n\n\" Set the leader key\n\"let mapleader=\" \"\n\n\" Set encoding\n\"set encoding=utf-8\n\n\" Plugins\n\" gruvbox to change color schema\n\" powerline to obtain bar in bottom with git/project status\ncall plug#begin()\n\"Plug 'gruvbox-community/gruvbox'\nPlug 'jalvesaq/Nvim-R'     \" To work with vim and R\nPlug 'preservim/nerdtree'  \" View the files\nPlug 'ncm2/ncm2'           \" Auto-complete R commands\nPlug 'gaalcaras/ncm-R'     \" Auto complete R commands\ncall plug#end()\n\n\" NERDTree configuration test\nnnoremap &lt;C-n&gt; :NERDTree&lt;CR&gt;\n\n\" Set the R path for plugin nvim-r\n\"let R_path = '~/R/x86_64-pc-linux-gnu-library/4.2'\n</code></pre>"},{"location":"vim_notes/#vim-workflow-for-r-projects","title":"vim workflow for R projects <p>Ok, I don't want to spend more time on this configuration thing. So I started using vim to work on my R project just to feel the main pains when switching from RStudio. Along the way, if there is too much pain because of lack of some sort of functionality that I was too attached to it, I will change the <code>.vimrc</code> file to try to relieve some pain.</p> <p><code>\\rf</code> Connect to R Console</p> <p><code>\\rq</code> Quit R Console</p> <p><code>\\d</code>  Run current line and move to the next line</p> <p><code>\\l</code> Run current line, but cursor will stay on the same line.</p> <p><code>\\pp</code> Run paragraph. But cursor will stay on the same block. </p> <p><code>\\pd</code> Runs block and move to the next one</p> <p><code>\\ss</code> Execute a block of selected code. This has to be done with visual mode</p> <p><code>\\aa</code> Run entire script</p> <p><code>\\ro</code> Open the \"Global Environment\"</p> <p><code>ctrl + w + l</code> Jump to left panel</p> <p><code>ctrl + w + h</code> Jump to right panel</p> <p>If I made a change on the <code>~/.vimrc</code> file, I can source it with <code>:source ~/.vimcr</code></p> <p>If I have installed the pluggin <code>NERDTree</code>, I need to remap some keys. At the  moment I have in my <code>~/.vimrc</code> file the line: <code>nnoremap &lt;C-n&gt; :NERDTree&lt;CR&gt;</code>, so I don't have to do <code>:NERDTree</code> to open the file browser. Now this can be done with:</p> <p><code>ctrl + n</code> Open file browser on left side by default.</p> <p>Inside the file tree browser, I can move with the arrows. To expand one folder and show contents, I can hit <code>ENTER</code>. Doing the same in an open folder, will close it.</p> <p>To move out from the NERDTree browser I can <code>ctrl + w + w</code> so I will be  jumping panels from left to right.</p>","text":""},{"location":"vim_notes/#references","title":"References","text":"<p>Plugin repos</p> <ul> <li>https://github.com/gaalcaras/ncm-R</li> <li>https://github.com/preservim/nerdtree</li> <li>https://github.com/jamespeapen/Nvim-R/wiki/Use</li> </ul> <p>Sites that can be useful:</p> <p>https://github.com/nodesource/distributions/blob/master/README.md#debinstall http://manuals.bioinformatics.ucr.edu/home/programming-in-r/vim-r https://hpcc.ucr.edu/manuals_linux-cluster_terminalIDE.html https://gist.github.com/tgirke/7a7c197b443243937f68c422e5471899</p>"}]}